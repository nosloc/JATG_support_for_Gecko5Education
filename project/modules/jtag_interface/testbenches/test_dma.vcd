$date
	Fri May  9 15:08:07 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_DMA $end
$var wire 9 ! addressBuffer [8:0] $end
$var wire 1 " writeEnable $end
$var wire 1 # request $end
$var wire 1 $ read_n_writeOUT $end
$var wire 1 % end_transactionOUT $end
$var wire 1 & data_validOUT $end
$var wire 32 ' dataIn [31:0] $end
$var wire 4 ( byte_enableOUT [3:0] $end
$var wire 1 ) busyOUT $end
$var wire 8 * busrt_sizeOUT [7:0] $end
$var wire 1 + begin_transactionOUT $end
$var wire 32 , address_dataOUT [31:0] $end
$var reg 32 - address_dataIN [31:0] $end
$var reg 32 . address_to_read [31:0] $end
$var reg 1 / busyIN $end
$var reg 1 0 clock $end
$var reg 32 1 dataOut [31:0] $end
$var reg 1 2 dataReady $end
$var reg 1 3 data_validIN $end
$var reg 1 4 end_transactionIN $end
$var reg 1 5 errorIN $end
$var reg 1 6 granted $end
$var reg 1 7 readReady $end
$var reg 1 8 reset $end
$scope module dut $end
$var wire 32 9 address_dataIN [31:0] $end
$var wire 9 : bufferAddress [8:0] $end
$var wire 1 / busyIN $end
$var wire 1 0 clock $end
$var wire 32 ; dataOut [31:0] $end
$var wire 1 3 data_validIN $end
$var wire 1 4 end_transactionIN $end
$var wire 1 5 errorIN $end
$var wire 1 6 granted $end
$var wire 32 < ipcore_address_to_read [31:0] $end
$var wire 4 = ipcore_byteEnable [3:0] $end
$var wire 1 2 ipcore_dataReady $end
$var wire 1 7 ipcore_readReady $end
$var wire 1 8 reset $end
$var wire 4 > s_dma_cur_state [3:0] $end
$var wire 1 ? s_reading_from_buffer_done $end
$var wire 1 " writeEnable $end
$var wire 1 # request $end
$var wire 1 $ read_n_writeOUT $end
$var wire 1 @ ipcore_switch_ready $end
$var wire 1 % end_transactionOUT $end
$var wire 1 & data_validOUT $end
$var wire 32 A dataIn [31:0] $end
$var wire 4 B byte_enableOUT [3:0] $end
$var wire 1 ) busyOUT $end
$var wire 8 C busrt_sizeOUT [7:0] $end
$var wire 1 + begin_transactionOUT $end
$var wire 32 D address_dataOUT [31:0] $end
$var parameter 32 E Base $end
$var parameter 32 F fsm_asking_for_buffer $end
$var parameter 32 G fsm_end_transaction $end
$var parameter 32 H fsm_idle $end
$var parameter 32 I fsm_read_request $end
$var parameter 32 J fsm_read_sending_handshake $end
$var parameter 32 K fsm_reading_data $end
$var parameter 32 L fsm_reading_from_buffer $end
$var parameter 32 M fsm_sending_data $end
$var parameter 32 N fsm_write_request $end
$var parameter 32 O fsm_write_sending_handshake $end
$var parameter 32 P fsm_writting_buffer $end
$var reg 32 Q buffer_data [31:0] $end
$var reg 4 R cur_state [3:0] $end
$var reg 4 S nxt_state [3:0] $end
$var reg 32 T s_address [31:0] $end
$var reg 4 U s_byte_enable [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 P
b10 O
b1 N
b11 M
b101 L
b1001 K
b1000 J
b111 I
b0 H
b100 G
b110 F
b1000000000000000000000000000000 E
$end
#0
$dumpvars
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 D
b0 C
b0 B
b0 A
1@
1?
b0 >
b1111 =
b0 <
b0 ;
b0 :
b0 9
08
07
06
05
04
03
02
b0 1
00
0/
b0 .
b0 -
b0 ,
0+
b0 *
0)
b0 (
b0 '
0&
0%
0$
0#
0"
b0 !
$end
#2
10
#4
00
18
#6
10
#8
b110 S
00
12
#10
0@
b101 S
b1111 U
b110 >
b110 R
10
#12
00
b10100101101001011010010110100101 1
b10100101101001011010010110100101 ;
#14
b1 S
b101 >
b101 R
10
#16
00
02
#18
1#
b10100101101001011010010110100101 Q
b1 >
b1 R
10
#20
00
#22
10
#24
b10 S
00
16
#26
b1111 (
b1111 B
1+
0#
b11 S
b10 >
b10 R
10
#28
00
b0 1
b0 ;
1/
06
#30
b10100101101001011010010110100101 ,
b10100101101001011010010110100101 D
b0 (
b0 B
0+
1&
b11 >
b11 R
10
#32
00
#34
10
#36
00
#38
10
#40
00
#42
10
#44
00
#46
10
#48
1%
b100 S
00
0/
#50
b0 ,
b0 D
0%
1@
0&
b0 S
b100 >
b100 R
10
#52
00
#54
b0 U
b0 Q
b0 >
b0 R
10
#56
00
#58
10
#60
00
#62
10
#64
b111 S
00
17
b1010000010100000101000001010 .
b1010000010100000101000001010 <
#66
1#
0@
b1010000010100000101000001010 T
b1111 U
b111 >
b111 R
10
#68
00
07
b0 .
b0 <
#70
10
#72
b1000 S
00
16
#74
b1010000010100000101000001010 ,
b1010000010100000101000001010 D
b1111 (
b1111 B
1+
0#
1$
b1001 S
b1000 >
b1000 R
10
#76
00
#78
b0 ,
b0 D
b0 (
b0 B
0+
0$
b1010 S
b1001 >
b1001 R
10
14
13
06
b10010001101000101011001111000 -
b10010001101000101011001111000 9
#80
00
#82
1"
b100 S
b1010 >
b1010 R
10
03
#83
04
#84
00
#86
1@
0"
b0 S
b100 >
b100 R
10
#88
00
#90
b0 U
b0 T
b0 >
b0 R
10
#92
00
#94
10
#96
00
#98
10
#100
00
#102
10
#103
